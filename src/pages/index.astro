---
import Airtable from 'airtable';

// Configura Airtable
const base = new Airtable({
  apiKey: import.meta.env.AIRTABLE_API_KEY
}).base(import.meta.env.AIRTABLE_BASE_ID);

// Recupera i dati
let items = [];
try {
  const records = await base(import.meta.env.AIRTABLE_TABLE_NAME)
    .select({ maxRecords: 100 })
    .all();
 
  items = records.map(record => ({
    id: record.id,
    title: record.fields.Name,
    description: record.fields.Description,
    image: record.fields.Photo?.[0]?.url,
    category: record.fields.Category,
    scientific: record.fields.Scientific
  }));

  // Ordina l'array in base al titolo in ordine alfabetico
  items.sort((a, b) => a.title.localeCompare(b.title));

} catch (error) {
  console.error('Errore caricamento dati:', error);
}

const titolo = "Il mio archivio";
---

<html lang="it">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width-device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{titolo}</title>
    
    <style>
      :global(body) {
        font-family: Verdana, Geneva, Tahoma, sans-serif;
        background-color: #f4f4f4;
        margin: 0;
        padding: 2rem;
      }
      h1 { text-align: center; margin-bottom: 2rem; cursor: pointer; }
      
      .grid {
        position: relative; padding: 1rem 0;
        border-top: 5px solid black; border-bottom: 5px solid black;
      }
      .card {
        background-color: transparent; border-bottom: 2px solid #000000;
        display: flex; cursor: pointer; transition: background-color 0.3s ease;
        position: relative;
      }
      .grid .card:last-child { border-bottom: none; }
      
      .card:not(.card-expanded):hover {
        background-color: rgba(116, 19, 19, 0.35);
      }
      .card:not(.card-expanded):hover .name-group h3,
      .card:not(.card-expanded):hover .name-group h4, 
      .card:not(.card-expanded):hover .category {
        color: white;
      }
      .card:not(.card-expanded):hover .category {
        border-color: white;
      }

      .card img, .card p { display: none; }
      .card-content {
        display: flex; justify-content: space-between; align-items: center;
        width: 100%; padding: 0.5rem 1rem;
      }
      .name-group {
        display: flex;
        align-items: baseline;
        gap: 0.75rem;
      }
      .card h3 {
        margin: 0; font-size: 1.1rem; font-weight: normal;
        transition: color 0.3s ease;
      }

      .card h4 {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translateY(-50%);
        margin: 0;
        font-size: 0.9rem;
        font-style: italic;
        font-weight: normal;
        color: #666;
        transition: color 0.3s ease;
      }

      .category {
        display: inline-block; font-size: 0.8rem; color: #555; border: 1px solid #ccc;
        padding: 4px 10px; border-radius: 15px; transition: color 0.3s ease, border-color 0.3s ease;
      }

      /* --- Stili per la CARD ESPANSA --- */
      .overlay {
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background: rgba(0,0,0,0.7); z-index: 100; cursor: pointer;
      }
      .card.card-expanded {
        position: fixed;
        top: 50%; left: 50%; right: 2rem;
        transform: translateY(-50%);
        width: auto; max-width: none;
        height: auto; max-height: 90vh; /* L'altezza massima rimane un vincolo utile */
        z-index: 101; cursor: default; background-color: white;
        border-radius: 16px; box-shadow: 0 8px 30px rgba(0,0,0,0.2); border-bottom: none;
        
        /* --- MODIFICA 1: Trasforma la card in un contenitore flex orizzontale --- */
        display: flex;
        flex-direction: row;
        align-items: stretch; /* Fa in modo che immagine e testo abbiano la stessa altezza */
      }
      .card.card-expanded:hover {
        background-color: white;
      }

      /* --- MODIFICA 2: Stile per la colonna dell'immagine --- */
      .card.card-expanded img {
        display: block;
        flex: 0 0 40%; /* Non cresce, non si restringe, occupa il 40% della larghezza */
        width: 40%;
        height: auto; /* L'altezza si adatta al contenitore flex */
        object-fit: cover; /* Riempie lo spazio della colonna senza distorsioni */
      }
      
      /* --- MODIFICA 3: Stile per la colonna del testo --- */
      .card.card-expanded .card-content {
        flex: 1 1 60%; /* Cresce e si restringe, partendo dal 60% della larghezza */
        width: 60%;
        flex-direction: column;
        align-items: flex-start;
        padding: 1.5rem;
        overflow-y: auto; /* Se il testo Ã¨ lungo, appare una scrollbar solo qui */
      }
      
      .card.card-expanded .name-group { flex-direction: column; align-items: flex-start; gap: 0; }
      .card.card-expanded h3 { font-size: 1.6rem; font-weight: bold; margin-bottom: 0.25rem; }
      .card.card-expanded h4 {
        position: static; transform: none; color: #555;
        font-size: 1rem; margin-bottom: 1rem;
      }
      .card.card-expanded p { display: block; line-height: 1.6; }
      .card.card-expanded .category {
        margin-top: 1.5rem; background-color: #e7e7e7; border: none; color: black;
      }
    </style>
  </head>
  <body>
    <h1>{titolo}</h1>
    
    <div class="grid">
      {items.map(item => (
        <div class="card">
          {item.image && <img src={item.image} alt={item.title} />}
          <div class="card-content">
            <div class="name-group">
              <h3>{item.title}</h3>
              {item.scientific && <h4>{item.scientific}</h4>}
            </div>
            <p>{item.description}</p>
            {item.category && <span class="category">{item.category}</span>}
          </div>
        </div>
      ))}
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const grid = document.querySelector('.grid');
        const mainTitle = document.querySelector('h1');
        let activeCard = null;

        const closeExpandedView = () => {
          if (!activeCard) return;
          activeCard.classList.remove('card-expanded');
          activeCard = null;
          const overlay = document.querySelector('.overlay');
          if (overlay) document.body.removeChild(overlay);
          document.body.style.overflow = 'auto';
        };

        const openExpandedView = (card) => {
          closeExpandedView();
          const overlay = document.createElement('div');
          overlay.className = 'overlay';
          document.body.appendChild(overlay);
          document.body.style.overflow = 'hidden';
          card.classList.add('card-expanded');
          activeCard = card;
          overlay.addEventListener('click', closeExpandedView);
        };

        grid.addEventListener('click', (event) => {
          const clickedCard = event.target.closest('.card');
          if (clickedCard && !clickedCard.classList.contains('card-expanded')) {
            openExpandedView(clickedCard);
          }
        });

        if (mainTitle) {
          mainTitle.addEventListener('click', closeExpandedView);
        }
        
        document.addEventListener('keydown', (event) => {
          if (event.key === 'Escape') {
            closeExpandedView();
          }
        });
      });
    </script>
  </body>
</html>